import React from 'react'
import * as constants from './constants'
import { Asset } from 'expo-asset'
import * as FileSystem from 'expo-file-system'
import { TextInput, Button, PaperProvider } from 'react-native-paper'
import { SelectList } from 'react-native-dropdown-select-list'
import { DatePickerInput, registerTranslation } from 'react-native-paper-dates'
import { StyleSheet, Text, View, Alert, ScrollView } from 'react-native'
import createPDF from './createPDF'

//Registrando a tradução dos títulos e informes de React Native Paper Dates
registerTranslation('pt', {
  save: 'Salvar',
  selectSingle: 'Escolha uma date',
  selectMultiple: 'Select dates',
  selectRange: 'Defina um período',
  notAccordingToDateFormat: (inputFormat) =>
    `O formato da data deve ser ${inputFormat}`,
  mustBeHigherThan: (date) => `Must be later then ${date}`,
  mustBeLowerThan: (date) => `Must be earlier then ${date}`,
  mustBeBetween: (startDate, endDate) =>
    `Must be between ${startDate} - ${endDate}`,
  dateIsDisabled: 'Day is not allowed',
  previous: 'Anterior',
  next: 'Próximo',
  hour: "Hora",
  "minute": "Minuto",
  typeInDate: 'Type in date',
  pickDateFromCalendar: 'Escolha uma data do calendário',
  close: 'Fechar',
})

export default function App() {

  const [info, setInfo] = React.useState({
    nome: '',
    cnpj: '',
    alvo: '',
    credencial: '',
    tipo_credencial: '',
    vulnerabilidade: '',
    criticidade: '',
    metodologia: '',
    data_inicio: undefined as Date | undefined,
    data_final: undefined as Date | undefined
  })
  const [logoUri, setLogoUri] = React.useState<string>("")

  const vulnerabilidades = Object.keys(constants.tipos_vulnerabilidade).map(
    (item, index) => ({ key: index + 1, value: item })
  )
  const graus_criticidade = Object.keys(constants.graus_criticidade).map(
    (item, index) => ({ key: index + 1, value: item })
  )
  const metodologias = Object.keys(constants.metodologias).map(
    (item, index) => ({ key: index + 1, value: item })
  )
  const tipos_credenciais = Object.keys(constants.tipos_credenciais).map(
    (item, index) => ({ key: index + 1, value: item })
  )

  const handleInfoChange = (name, value) => {
    setInfo({ ...info, [name]: value })
  }

  React.useEffect(() => {
    const loadLogo = async () => {
      const logoAsset = Asset.fromModule(require('./assets/logo.png'))
      await logoAsset.downloadAsync()
      const base64Image = await FileSystem.readAsStringAsync(logoAsset.localUri || "./assets/logo.png", {
        encoding: FileSystem.EncodingType.Base64,
      })
      setLogoUri(`data:image/png;base64,${base64Image}`)
    }

    loadLogo()
  }, [])

  return (
    <PaperProvider>
      <ScrollView style={styles.scrollContainer}>
        <View style={styles.container}>
          <View style={styles.section}>
            <Text style={styles.title}>Dados do Cliente</Text>
            <TextInput
              label="Razão Social"
              value={info.nome}
              onChangeText={(value) => handleInfoChange('nome', value)}
              style={styles.input}
            />
            <TextInput
              label="CNPJ"
              value={info.cnpj}
              onChangeText={(value) => handleInfoChange('cnpj', value)}
              keyboardType="numeric"
              style={styles.input}
            />
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Dados do Target</Text>
            <TextInput
              label="Website Alvo (Target)"
              value={info.alvo}
              onChangeText={(value) => handleInfoChange('alvo', value)}
              style={styles.input}
            />
            <DatePickerInput
              locale="pt"
              label="Data Inicial"
              value={info.data_inicio}
              onChange={(date) => handleInfoChange('data_inicio', date)}
              inputMode="start"
              style={styles.input}
            />
            <DatePickerInput
              locale="pt"
              label="Data Final"
              value={info.data_final}
              onChange={(date) => handleInfoChange('data_final', date)}
              inputMode="start"
              style={styles.input}
            />
            <TextInput
              label="Email (Credencial)"
              value={info.credencial}
              onChangeText={(value) => handleInfoChange('credencial', value)}
              style={styles.input}
            />
            <SelectList
              boxStyles={{
                marginBottom: 15
              }}
              dropdownStyles={{
                marginBottom: 20
              }}
              setSelected={(value) => handleInfoChange('tipo_credencial', value)}
              data={tipos_credenciais}
              placeholder="Selecione o tipo da credencial"
              save="value"
            />
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Conclusão do Relatório </Text>
            <SelectList
              boxStyles={{
                marginBottom: 15
              }}
              dropdownStyles={{
                marginBottom: 20
              }}
              setSelected={(value) => handleInfoChange('vulnerabilidade', value)}
              data={vulnerabilidades}
              placeholder="Selecione a vulnerabilidade encontrada"
              save="value"
            />
            <SelectList
              boxStyles={{
                marginBottom: 15
              }}
              dropdownStyles={{
                marginBottom: 20
              }}
              setSelected={(value) => handleInfoChange('criticidade', value)}
              data={graus_criticidade}
              placeholder="Selecione o grau de criticidade"
              save="value"
            />
            <SelectList
              boxStyles={{
                marginBottom: 15
              }}
              dropdownStyles={{
                marginBottom: 7
              }}
              setSelected={(value) => handleInfoChange('metodologia', value)}
              data={metodologias}
              placeholder="Selecione a metodologia aplicada"
              save="value"
            />
          </View>
          <Button
            mode="contained"
            onPress={() => createPDF(info, vulnerabilidades)}
            style={styles.button}
          >
            Gerar relatório
          </Button>
        </View>
      </ScrollView>
    </PaperProvider>
  )
}

const styles = StyleSheet.create({
  scrollContainer: {
    flex: 1
  },
  container: {
    padding: 16,
    paddingTop: 70,
    overflow: 'scroll',
    backgroundColor: '#f4f4f4'
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center'
  },
  section: {
    backgroundColor: '#ffffff',
    padding: 16,
    borderRadius: 8,
    marginBottom: 16,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 2
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 12
  },
  input: {
    marginBottom: 12
  },
  select: {
    marginBottom: 12
  },
  button: {
    marginTop: 16
  },
})